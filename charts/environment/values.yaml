# Default values for environment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  nameOverride: &nameOverride ""
  environment: "development"

parameters:
  domain: &domain 127.0.0.1.nip.io
  jwt:
    aud: &jwt_aud authenticated
    service_key: &service_key service_key
    anon_key: &anon_key anon_key

cnpg:
  enabled: true
  clusterId: cnpg-cluster
  image: ghcr.io/voltade/postgres:17.5-20250717-a2c5abf
  instances: 1
  storage:
    storageClass: standard
    size: 4Gi
  affinity:
    enabled: false
    nodeSelector: {}
    tolerations: []
  backup:
    enabled: false
    serverName: ""
    objectStoreName: cnpg-object-store
  postgresql:
    parameters:
      "pgsodium.enable_event_trigger": "off"
      "pgsodium.getkey_script": "/usr/share/postgresql/17/extension/pgsodium_getkey"
    shared_preload_libraries:
      - pg_stat_statements
      - pgaudit
      - plpgsql
      - plpgsql_check
      - pg_cron
      - pg_net
      - auto_explain
      - pg_tle
      - plan_filter
      - supabase_vault
  migrations:
    enabled: true
    configMapName: cnpg-migration-config
    scripts:
      - 0000_extensions-schema.sql
      - 0001_nanoid.sql
      - 0001_supabase_roles.sql
      - 0002_supabase_public_permissions.sql
      - 0003_supabase_storage_permissions.sql
      - 99-logs.sql
      - 99-realtime.sql

rest:
  enabled: true
  replicaCount: 1
  image:
    repository: postgrest/postgrest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m
  environment:
    PGRST_DB_URI: $(DB_DRIVER)://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSL)
    DB_DRIVER: postgres
    DB_HOST: cnpg-cluster-rw
    DB_PORT: 5432
    DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    DB_NAME: postgres
    DB_SSL: disable
    PGRST_APP_SETTINGS_JWT_EXP: 3600
    PGRST_DB_ANON_ROLE: anon
    PGRST_DB_SCHEMAS: public,storage
    PGRST_OPENAPI_MODE: disabled
    PGRST_JWT_SECRET:
      valueFrom:
        secretKeyRef:
          name: platform-envs
          key: jwt-secret
    PGRST_APP_SETTINGS_JWT_SECRET:
      valueFrom:
        secretKeyRef:
          name: platform-envs
          key: jwt-secret
    PGRST_JWT_AUD: *jwt_aud

# Metadata API configuration
meta:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/postgres-meta
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m
  environment:
    DB_DRIVER: postgres
    PG_META_DB_HOST: cnpg-cluster-rw
    PG_META_DB_PORT: 5432
    PG_META_DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    PG_META_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    PG_META_DB_NAME: postgres
    PG_META_DB_SSL_MODE: disable
    PG_META_PORT: "8080"

studio:
  enabled: true
  global:
    enabled: true
    baseDomain: *domain
    nameOverride: *nameOverride
  replicaCount: 1
  image:
    repository: supabase/studio
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
  livenessProbe:
    httpGet:
      path: /api/platform/profile
      port: 3000
    initialDelaySeconds: 30
  environment:
    AUTH_JWT_SECRET:
      valueFrom:
        secretKeyRef:
          name: platform-envs
          key: jwt-secret
    SUPABASE_ANON_KEY: *anon_key
    SUPABASE_SERVICE_KEY: *service_key
    STUDIO_PORT: 3000
    NEXT_PUBLIC_ENABLE_LOGS: "false"
    NEXT_PUBLIC_ENABLE_TELEMETRY: "false"
    NODE_ENV: "production"

storage:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/storage-api
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 5000
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
  environment:
    NODE_ENV: "production"
    AUTH_JWT_SECRET:
      valueFrom:
        secretKeyRef:
          name: platform-envs
          key: jwt-secret
    DB_DRIVER: postgres
    DB_HOST: cnpg-cluster-rw
    DB_PORT: 5432
    DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    DB_NAME: postgres
    DB_SSL: disable
    DATABASE_URL:
      value: "postgres://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSL)"
    PGOPTIONS: "-c search_path=storage,public"
    FILE_SIZE_LIMIT: 104857600
    STORAGE_BACKEND: file
    STORAGE_FILE_BACKEND_PATH: ./data
    STORAGE_FILE_ETAG_ALGORITHM: md5

auth:
  enabled: true
  replicaCount: 1
  global:
    enabled: true
    baseDomain: *domain
    nameOverride: *nameOverride
  image:
    repository: supabase/gotrue
    tag: v2.158.1
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9999
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m
  db:
    initContainerImage:
      repository: postgres
      tag: 15-alpine
      pullPolicy: IfNotPresent
  environment:
    GOTRUE_JWT_SECRET:
      valueFrom:
        secretKeyRef:
          name: platform-envs
          key: jwt-secret
    DB_DRIVER: postgres
    DB_HOST: cnpg-cluster-rw
    DB_PORT: 5432
    DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    DB_NAME: postgres
    DB_SSL: disable
    GOTRUE_DB_DRIVER: $(DB_DRIVER)
    GOTRUE_DB_DATABASE_URL: $(DB_DRIVER)://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?search_path=auth&sslmode=$(DB_SSL)
    GOTRUE_API_HOST: 0.0.0.0
    GOTRUE_API_PORT: 9999
    GOTRUE_DISABLE_SIGNUP: false
    GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: true
    GOTRUE_EXTERNAL_EMAIL_ENABLED: true
    GOTRUE_EXTERNAL_PHONE_ENABLED: true
    GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_ENABLED: true
    GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_URI: pg-functions://postgres/public/custom_access_token_hook
    GOTRUE_JWT_ADMIN_ROLES: service_role
    GOTRUE_JWT_AUD: *jwt_aud
    GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
    GOTRUE_JWT_EXP: 3600
    GOTRUE_MAILER_AUTOCONFIRM: false
    GOTRUE_MAILER_EXTERNAL_HOSTS: *domain
    GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/v1/verify
    GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: /auth/v1/verify
    GOTRUE_MAILER_URLPATHS_INVITE: /auth/v1/verify
    GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/v1/verify
    GOTRUE_RATE_LIMIT_EMAIL_SENT: 10000
    GOTRUE_SMTP_HOST: email-smtp.ap-southeast-1.amazonaws.com
    GOTRUE_SMTP_PORT: 465
    GOTRUE_URI_ALLOW_LIST: http://127.0.0.1:5173,https://127.0.0.1:5173,http://localhost:5173,https://localhost:5173

deployment:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: nginx
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 80

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}
