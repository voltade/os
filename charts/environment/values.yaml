# Default values for environment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  orgId: ""
  environmentId: ""
  baseDomain: 127.0.0.1.nip.io
  publicKey: ""
  anonKey: ""
  serviceKey: ""

fullnameOverride: environment-runner

deployment:
  enabled: true
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: registry.127.0.0.1.nip.io/runner
    # This sets the pull policy for images.
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  environment:
    ORG_ID: "acme"
    OS_URL: "http://platform.platform.svc.cluster.local"

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 3000

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
  readinessProbe:
    httpGet:
      path: /healthz
      port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

postgrest:
  enabled: true
  fullnameOverride: postgrest
  replicaCount: 1
  image:
    repository: postgrest/postgrest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m
  environment:
    PGRST_DB_URI: $(DB_DRIVER)://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSL)
    DB_DRIVER: postgres
    DB_HOST: cnpg-cluster-rw
    DB_PORT: 5432
    DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    DB_NAME: postgres
    DB_SSL: disable
    PGRST_DB_ANON_ROLE: anon
    PGRST_DB_SCHEMAS: public,storage
    PGRST_OPENAPI_MODE: disabled

supabase-meta:
  enabled: true
  fullnameOverride: supabase-meta
  replicaCount: 1
  image:
    repository: supabase/postgres-meta
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  resources:
    requests:
      memory: 64Mi
      cpu: 25m
    limits:
      memory: 128Mi
      cpu: 50m
  environment:
    DB_DRIVER: postgres
    PG_META_DB_HOST: cnpg-cluster-rw
    PG_META_DB_PORT: 5432
    PG_META_DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    PG_META_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    PG_META_DB_NAME: postgres
    PG_META_DB_SSL_MODE: disable
    PG_META_PORT: "8080"

supabase-studio:
  enabled: true
  fullnameOverride: supabase-studio
  replicaCount: 1
  image:
    repository: supabase/studio
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
  livenessProbe:
    httpGet:
      path: /api/platform/profile
      port: 3000
    initialDelaySeconds: 30
  environment:
    STUDIO_PORT: 3000
    NEXT_PUBLIC_ENABLE_LOGS: "false"
    NEXT_PUBLIC_ENABLE_TELEMETRY: "false"
    NODE_ENV: "production"
    STUDIO_PG_META_URL: http://supabase-meta:8080
    POSTGREST_URL: http://postgrest:3000

supabase-storage:
  enabled: true
  fullnameOverride: supabase-storage
  replicaCount: 1
  image:
    repository: supabase/storage-api
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 5000
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 100m
  environment:
    NODE_ENV: "production"
    DB_DRIVER: postgres
    DB_HOST: cnpg-cluster-rw
    DB_PORT: 5432
    DB_USER:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: username
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: cnpg-cluster-superuser
          key: password
    DB_NAME: postgres
    DB_SSL: disable
    DATABASE_URL:
      value: "postgres://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSL)"
    PGOPTIONS: "-c search_path=storage,public"
    FILE_SIZE_LIMIT: 104857600
    STORAGE_BACKEND: file
    STORAGE_FILE_BACKEND_PATH: ./data
    STORAGE_FILE_ETAG_ALGORITHM: md5
