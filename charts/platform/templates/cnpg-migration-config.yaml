apiVersion: v1
kind: ConfigMap
metadata:
  name: cnpg-migration-config
  annotations:
    reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
data:
  0000_extensions-schema.sql: |
    create schema if not exists extensions;

  0001_nanoid.sql: |
    /*
    * Copyright 2024 Viascom Ltd liab. Co
    *
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    create extension if not exists pgcrypto with schema extensions;

    -- The `nanoid()` function generates a compact, URL-friendly unique identifier.
    -- Based on the given size and alphabet, it creates a randomized string that's ideal for
    -- use-cases requiring small, unpredictable IDs (e.g., URL shorteners, generated file names, etc.).
    -- While it comes with a default configuration, the function is designed to be flexible,
    -- allowing for customization to meet specific needs.
    drop function if exists extensions.nanoid(int, text, float);

    create or replace function extensions.nanoid(size int default 16, -- The number of symbols in the NanoId String. Must be greater than 0.
    alphabet text default '0123456789abcdefghijklmnopqrstuvwxyz', -- The symbols used in the NanoId String. Must contain between 1 and 255 symbols.
    additionalBytesFactor float default 1.6 -- The additional bytes factor used for calculating the step size. Must be equal or greater then 1.
    )
      returns text -- A randomly generated NanoId String
      language plpgsql
      volatile PARALLEL SAFE
      -- Uncomment the following line if you have superuser privileges
      -- LEAKPROOF
      as $$
    declare
      alphabetArray text[];
      alphabetLength int := 64;
      mask int := 63;
      step int := 34;
    begin
      if size is null or size < 1 then
        raise exception 'The size must be defined and greater than 0!';
      end if;
      if alphabet is null or length(alphabet) = 0 or length(alphabet) > 255 then
        raise exception 'The alphabet can''t be undefined, zero or bigger than 255 symbols!';
      end if;
      if additionalBytesFactor is null or additionalBytesFactor < 1 then
        raise exception 'The additional bytes factor can''t be less than 1!';
      end if;
      alphabetArray := regexp_split_to_array(alphabet, '');
      alphabetLength := array_length(alphabetArray, 1);
      mask :=(2 << cast(floor(log(alphabetLength - 1) / log(2)) as int)) - 1;
      step := cast(ceil(additionalBytesFactor * mask * size / alphabetLength) as int);
      if step > 1024 then
        step := 1024;
        -- The step size % can''t be bigger then 1024!
      end if;
      return extensions.nanoid_optimized(size, alphabet, mask, step);
    end
    $$;

    -- Generates an optimized random string of a specified size using the given alphabet, mask, and step.
    -- This optimized version is designed for higher performance and lower memory overhead.
    -- No checks are performed! Use it only if you really know what you are doing.
    drop function if exists extensions.nanoid_optimized(int, text, int, int);

    create or replace function extensions.nanoid_optimized(size int, -- The desired length of the generated string.
    alphabet text, -- The set of characters to choose from for generating the string.
    mask int, -- The mask used for mapping random bytes to alphabet indices. Should be `(2^n) - 1` where `n` is a power of 2 less than or equal to the alphabet size.
    step int -- The number of random bytes to generate in each iteration. A larger value may speed up the function but increase memory usage.
    )
      returns text -- A randomly generated NanoId String
      language plpgsql
      volatile PARALLEL SAFE
      -- Uncomment the following line if you have superuser privileges
      -- LEAKPROOF
      as $$
    declare
      idBuilder text := '';
      counter int := 0;
      bytes bytea;
      alphabetIndex int;
      alphabetArray text[];
      alphabetLength int := 64;
    begin
      alphabetArray := regexp_split_to_array(alphabet, '');
      alphabetLength := array_length(alphabetArray, 1);
      loop
        bytes := extensions.gen_random_bytes(step);
        for counter in 0..step - 1 loop
          alphabetIndex :=(get_byte(bytes, counter) & mask) + 1;
          if alphabetIndex <= alphabetLength then
            idBuilder := idBuilder || alphabetArray[alphabetIndex];
            if length(idBuilder) = size then
              return idBuilder;
            end if;
          end if;
        end loop;
      end loop;
    end
    $$;

  0001_supabase_roles.sql: |
    -- 1. supabase_admin
    CREATE ROLE supabase_admin
    WITH
      LOGIN
      SUPERUSER
      CREATEDB
      CREATEROLE
      REPLICATION
      BYPASSRLS;

    -- 2. anon
    CREATE ROLE anon
      WITH
        NOLOGIN
        NOINHERIT;

    -- 3. authenticated
    CREATE ROLE authenticated
      WITH
        NOLOGIN
        NOINHERIT;

    -- 4. pgsodium_keyiduser
    CREATE ROLE pgsodium_keyiduser
      WITH
        NOLOGIN;  -- default, but made explicit

    -- 5. pgsodium_keyholder
    CREATE ROLE pgsodium_keyholder
      WITH
        NOLOGIN;  -- default
    -- grant membership: pgsodium_keyholder IN pgsodium_keyiduser
    GRANT pgsodium_keyiduser TO pgsodium_keyholder;

    -- 6. service_role
    CREATE ROLE service_role
      WITH
        INHERIT
        NOLOGIN
        BYPASSRLS;
    -- grant membership: service_role IN pgsodium_keyholder
    GRANT pgsodium_keyholder TO service_role;

    -- 7. authenticator
    CREATE ROLE authenticator
      WITH
        LOGIN
        NOINHERIT;
    -- grant membership: authenticator IN (anon, authenticated, service_role, supabase_admin)
    GRANT anon           TO authenticator;
    GRANT authenticated  TO authenticator;
    GRANT service_role   TO authenticator;
    GRANT supabase_admin TO authenticator;

    -- 8. pgbouncer
    -- password should be set to the value stored in your Kubernetes secret
    CREATE ROLE pgbouncer
      WITH
        LOGIN;

    -- 9. supabase_auth_admin
    CREATE ROLE supabase_auth_admin
      WITH
        LOGIN;

    -- 10. supabase_storage_admin
    CREATE ROLE supabase_storage_admin
      WITH
        LOGIN
        CREATEROLE
        NOINHERIT;
    -- grant membership: supabase_storage_admin IN authenticator
    GRANT authenticator TO supabase_storage_admin

  0002_supabase_public_permissions.sql: |
    --
    -- Name: SCHEMA public; Type: ACL; Schema: -; Owner: -
    --
    GRANT USAGE ON SCHEMA public TO postgres;
    GRANT USAGE ON SCHEMA public TO anon;
    GRANT USAGE ON SCHEMA public TO authenticated;
    GRANT USAGE ON SCHEMA public TO service_role;
    GRANT USAGE ON SCHEMA public TO supabase_auth_admin;


    --
    -- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: -
    --
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;

    --
    -- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;

    --
    -- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


    --
    -- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;

    --
    -- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


    --
    -- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;

  0003_supabase_storage_permissions.sql: |
    --
    -- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: -
    --

    GRANT ALL ON SCHEMA storage TO postgres;
    GRANT USAGE ON SCHEMA storage TO anon;
    GRANT USAGE ON SCHEMA storage TO authenticated;
    GRANT USAGE ON SCHEMA storage TO service_role;
    GRANT ALL ON SCHEMA storage TO supabase_storage_admin;


    --
    -- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


    --
    -- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


    --
    -- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: -
    --

    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
    ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;
  99-jwt.sql: |
    -- Use psql variables that will be populated by CNPG from environment variables
    \set jwt_secret `echo $JWT_SECRET`
    \set jwt_exp `echo $JWT_EXP`

    ALTER DATABASE postgres SET "app.settings.jwt_secret" TO :'jwt_secret';
    ALTER DATABASE postgres SET "app.settings.jwt_exp" TO :'jwt_exp';
  99-logs.sql: |
    create schema if not exists _analytics;
    alter schema _analytics owner to postgres;
  99-realtime.sql: |
    create schema if not exists _realtime;
    alter schema _realtime owner to postgres;
  98-webhooks.sql: |
    BEGIN;
      -- Create pg_net extension
      CREATE EXTENSION IF NOT EXISTS pg_net SCHEMA extensions;
      -- Create supabase_functions schema
      CREATE SCHEMA supabase_functions AUTHORIZATION supabase_admin;
      GRANT USAGE ON SCHEMA supabase_functions TO postgres, anon, authenticated, service_role;
      ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON TABLES TO postgres, anon, authenticated, service_role;
      ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO postgres, anon, authenticated, service_role;
      ALTER DEFAULT PRIVILEGES IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO postgres, anon, authenticated, service_role;
      -- supabase_functions.migrations definition
      CREATE TABLE supabase_functions.migrations (
        version text PRIMARY KEY,
        inserted_at timestamptz NOT NULL DEFAULT NOW()
      );
      -- Initial supabase_functions migration
      INSERT INTO supabase_functions.migrations (version) VALUES ('initial');
      -- supabase_functions.hooks definition
      CREATE TABLE supabase_functions.hooks (
        id bigserial PRIMARY KEY,
        hook_table_id integer NOT NULL,
        hook_name text NOT NULL,
        created_at timestamptz NOT NULL DEFAULT NOW(),
        request_id bigint
      );
      CREATE INDEX supabase_functions_hooks_request_id_idx ON supabase_functions.hooks USING btree (request_id);
      CREATE INDEX supabase_functions_hooks_h_table_id_h_name_idx ON supabase_functions.hooks USING btree (hook_table_id, hook_name);
      COMMENT ON TABLE supabase_functions.hooks IS 'Supabase Functions Hooks: Audit trail for triggered hooks.';
      CREATE FUNCTION supabase_functions.http_request()
        RETURNS trigger
        LANGUAGE plpgsql
        AS $function$
        DECLARE
          request_id bigint;
          payload jsonb;
          url text := TG_ARGV[0]::text;
          method text := TG_ARGV[1]::text;
          headers jsonb DEFAULT '{}'::jsonb;
          params jsonb DEFAULT '{}'::jsonb;
          timeout_ms integer DEFAULT 1000;
        BEGIN
          IF url IS NULL OR url = 'null' THEN
            RAISE EXCEPTION 'url argument is missing';
          END IF;

          IF method IS NULL OR method = 'null' THEN
            RAISE EXCEPTION 'method argument is missing';
          END IF;

          IF TG_ARGV[2] IS NULL OR TG_ARGV[2] = 'null' THEN
            headers = '{"Content-Type": "application/json"}'::jsonb;
          ELSE
            headers = TG_ARGV[2]::jsonb;
          END IF;

          IF TG_ARGV[3] IS NULL OR TG_ARGV[3] = 'null' THEN
            params = '{}'::jsonb;
          ELSE
            params = TG_ARGV[3]::jsonb;
          END IF;

          IF TG_ARGV[4] IS NULL OR TG_ARGV[4] = 'null' THEN
            timeout_ms = 1000;
          ELSE
            timeout_ms = TG_ARGV[4]::integer;
          END IF;

          CASE
            WHEN method = 'GET' THEN
              SELECT http_get INTO request_id FROM net.http_get(
                url,
                params,
                headers,
                timeout_ms
              );
            WHEN method = 'POST' THEN
              payload = jsonb_build_object(
                'old_record', OLD,
                'record', NEW,
                'type', TG_OP,
                'table', TG_TABLE_NAME,
                'schema', TG_TABLE_SCHEMA
              );

              SELECT http_post INTO request_id FROM net.http_post(
                url,
                payload,
                params,
                headers,
                timeout_ms
              );
            ELSE
              RAISE EXCEPTION 'method argument % is invalid', method;
          END CASE;

          INSERT INTO supabase_functions.hooks
            (hook_table_id, hook_name, request_id)
          VALUES
            (TG_RELID, TG_NAME, request_id);

          RETURN NEW;
        END
      $function$;
      -- Supabase super admin
      DO
      $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1
          FROM pg_roles
          WHERE rolname = 'supabase_functions_admin'
        )
        THEN
          CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
        END IF;
      END
      $$;
      GRANT ALL PRIVILEGES ON SCHEMA supabase_functions TO supabase_functions_admin;
      GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA supabase_functions TO supabase_functions_admin;
      GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA supabase_functions TO supabase_functions_admin;
      ALTER USER supabase_functions_admin SET search_path = "supabase_functions";
      ALTER table "supabase_functions".migrations OWNER TO supabase_functions_admin;
      ALTER table "supabase_functions".hooks OWNER TO supabase_functions_admin;
      ALTER function "supabase_functions".http_request() OWNER TO supabase_functions_admin;
      GRANT supabase_functions_admin TO postgres;
      -- Remove unused supabase_pg_net_admin role
      DO
      $$
      BEGIN
        IF EXISTS (
          SELECT 1
          FROM pg_roles
          WHERE rolname = 'supabase_pg_net_admin'
        )
        THEN
          REASSIGN OWNED BY supabase_pg_net_admin TO supabase_admin;
          DROP OWNED BY supabase_pg_net_admin;
          DROP ROLE supabase_pg_net_admin;
        END IF;
      END
      $$;
      -- pg_net grants when extension is already enabled
      DO
      $$
      BEGIN
        IF EXISTS (
          SELECT 1
          FROM pg_extension
          WHERE extname = 'pg_net'
        )
        THEN
          GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;
          ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
          ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
          ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
          ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
          REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
          REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
          GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
          GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
        END IF;
      END
      $$;
      -- Event trigger for pg_net
      CREATE OR REPLACE FUNCTION extensions.grant_pg_net_access()
      RETURNS event_trigger
      LANGUAGE plpgsql
      AS $$
      BEGIN
        IF EXISTS (
          SELECT 1
          FROM pg_event_trigger_ddl_commands() AS ev
          JOIN pg_extension AS ext
          ON ev.objid = ext.oid
          WHERE ext.extname = 'pg_net'
        )
        THEN
          GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;
          ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
          ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
          ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
          ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
          REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
          REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
          GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
          GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
        END IF;
      END;
      $$;
      COMMENT ON FUNCTION extensions.grant_pg_net_access IS 'Grants access to pg_net';
      DO
      $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1
          FROM pg_event_trigger
          WHERE evtname = 'issue_pg_net_access'
        ) THEN
          CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end WHEN TAG IN ('CREATE EXTENSION')
          EXECUTE PROCEDURE extensions.grant_pg_net_access();
        END IF;
      END
      $$;
      INSERT INTO supabase_functions.migrations (version) VALUES ('20210809183423_update_grants');
      ALTER function supabase_functions.http_request() SECURITY DEFINER;
      ALTER function supabase_functions.http_request() SET search_path = supabase_functions;
      REVOKE ALL ON FUNCTION supabase_functions.http_request() FROM PUBLIC;
      GRANT EXECUTE ON FUNCTION supabase_functions.http_request() TO postgres, anon, authenticated, service_role;
    COMMIT;
