# Default values for platform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

secret:
  enabled: true
  clusterAdmin:
    username: &cluster_admin_username app
    password: &cluster_admin_password password
  jwt:
    secret: super-secret-jwt-token-with-at-least-32-characters-long
    service_key: &service_key eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc1MzE3NzYyMSwiZXhwIjoyMDY4NTM3NjIxLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.1fOo-4HVWxITiSvS1hYa5Hnz3UTYLVyWhsYCh_BlUmE
    anon_key: &anon_key eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc1MzE3NzYyMSwiZXhwIjoyMDY4NTM3NjIxLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwicm9sZSI6ImFub24ifQ.ET6EM66WagMXqibKlMJPF0tsXtKatIpTgA8R2S6sSOo

# RBAC configuration for cluster-wide permissions
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # ClusterRole rules can be customized here
  rules:
    # Enable management of CNPG PostgreSQL clusters
    manageClusters: true
    # Enable management of secrets across all namespaces
    manageSecrets: true
    # Enable management of pods and services
    managePods: true
    # Enable management of RBAC resources
    manageClusterRoleBindings: true
    # Enable management of service accounts
    manageServiceAccounts: true
    # Enable dev container remote access (exec, logs, port-forward)
    devContainerAccess: true
    # Enable management of ingresses
    manageIngresses: true
    # Enable management of namespaces
    manageNamespaces: true

cnpg:
  hostname: platform.127.0.0.1.nip.io
  enabled: true
  clusterId: cnpg-cluster
  image: ghcr.io/voltade/postgres:17.5-20250717-a2c5abf
  instances: 1
  storage:
    storageClass: standard
    size: 4Gi
  affinity:
    enabled: false
    nodeSelector: {}
    tolerations: []
  backup:
    enabled: false
    serverName: ""
    objectStoreName: cnpg-object-store
  postgresql:
    parameters:
      "pgsodium.enable_event_trigger": "off"
      "pgsodium.getkey_script": "/usr/share/postgresql/17/extension/pgsodium_getkey"
    shared_preload_libraries:
      - pg_stat_statements
      - pgaudit
      - plpgsql
      - plpgsql_check
      - pg_cron
      - pg_net
      - auto_explain
      - pg_tle
      - plan_filter
      - supabase_vault
  migrations:
    enabled: true
    configMapName: cnpg-migration-config
    scripts:
      - 0000_extensions-schema.sql
      - 0001_nanoid.sql
      - 0001_supabase_roles.sql
      - 0002_supabase_public_permissions.sql
      - 0003_supabase_storage_permissions.sql
      - 99-logs.sql
      - 99-realtime.sql

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
